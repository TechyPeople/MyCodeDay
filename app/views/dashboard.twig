{% extends "template.twig" %}
{% block section %}dashboard{% endblock %}
{% block content %}
    <section class="countdown">
        <section class="active">
            {% if managed_batch.starts_at.isFuture %}
                <span class="weeks" id="time-remaining-weeks">{{ ((managed_batch.starts_at.diffInDays)/7)|round(0, 'floor') }} weeks</span>
                <span class="days" id="time-remaining-days">{{ (managed_batch.starts_at.diffInDays)%7 }} days</span>
                <span class="hours" id="time-remaining-hours">{{ (managed_batch.starts_at.diffInHours)%24 }} hours</span>
                <span class="minutes" id="time-remaining-minutes">{{ (managed_batch.starts_at.diffInMinutes)%60 }} minutes</span>
                <span class="seconds" id="time-remaining-seconds">{{ (managed_batch.starts_at.diffInSeconds)%60 }} seconds</span>
                left.
            {% elseif managed_batch.ends_at.isFuture %}
                It's CodeDay!
            {% else %}
                CodeDay is over.
            {% endif %}
        </section>
        <section class="details">
            <span class="name">CodeDay {{ managed_batch.name }}</span>
            <span class="date">{{ managed_batch.starts_at|date('F j, Y') }}</span>
        </section>
    </section>
    {% if me.current_managed_events|length > 0 %}
        <section class="my-events">
            <ul>
                {% for event in me.current_managed_events %}
                    <li id="my-{{ event.id }}">
                        <a href="/event/{{ event.id }}">
                            <div class="
                                name
                                {% if event.allow_registrations_calculated and event.remaining_registrations > 0 %}
                                    open
                                {% elseif event.allow_registrations_calculated %}
                                    sold-out
                                {% elseif event.venue %}
                                    venue
                                {% else %}
                                    closed
                                {% endif %}
                            " title="{{ event.name }}">
                                {{ event.abbr }}
                            </div>
                            {% if not event.allow_registrations_calculated %}
                                <div class="notify">
                                    <span class="number">{{ event.notify.count }}</span>
                                    <span class="label">Subscribers</span>
                                </div>
                            {% elseif not managed_batch.starts_at.isFuture %}
                                <div class="here">
                                    <span class="number">{{ event.attendees_here.count }}</span>
                                    <span class="label">Here</span>
                                </div>
                            {% else %}
                                <div class="registrants">
                                    <span class="number">{{ event.registrations.count }}</span>
                                    <span class="label">Registrations</span>
                                </div>
                                <div class="today">
                                    <span class="number">{{ event.registrations_today|length }}</span>
                                    <span class="label">Today</span>
                                </div>
                                <div class="this-week">
                                    <span class="number">{{ event.registrations_this_week|length }}</span>
                                    <span class="label">This Week</span>
                                </div>
                                <div class="percent">
                                    <span class="number">{{ ((event.registrations.count / event.registration_estimate) * 100)|round(0) }}%</span>
                                    <span class="label">Of Commitment</span>
                                </div>
                                <div class="predicted"
                                  {% if event.prediction() > event.max_registrations %}
                                    title="Your event will probably sell out. The actual prediction is {{ event.prediction() }}."
                                  {% endif %}>
                                    <span class="number">{{ event.pretty_prediction() }}</span>
                                    <span class="label">Predicted</span>
                                </div>
                            {% endif %}
                        </a>
                    </li>
                {% endfor %}
            </ul>
        </section>
    {% endif %}
    <section class="other-events">
        <section class="list">
            <ul>
                {% for event in managed_batch.events %}
                    <li id="hud-{{ event.id }}">
                        {% if me.is_admin %}
                            <a href="/event/{{ event.id }}">
                        {% endif %}
                            <div class="
                            name
                            {% if event.allow_registrations_calculated and event.remaining_registrations > 0 %}
                                open
                            {% elseif event.allow_registrations_calculated %}
                                sold-out
                            {% elseif event.venue %}
                                venue
                            {% else %}
                                closed
                            {% endif %}
                        " title="{{ event.name }}">
                                {{ event.abbr }}
                            </div>
                            {% if not event.allow_registrations_calculated %}
                                <div class="notify">
                                    <span class="number">{{ event.notify.count }}</span>
                                    <span class="label">Sub</span>
                                </div>
                            {% elseif not managed_batch.starts_at.isFuture %}
                                <div class="here">
                                    <span class="number">{{ event.attendees_here.count }}</span>
                                    <span class="label">Here</span>
                                </div>
                            {% else %}
                                <div class="registrants">
                                    <span class="number">{{ event.registrations.count }}</span>
                                    <span class="label">Reg</span>
                                </div>
                                <div class="this-week">
                                    <span class="number">{{ event.registrations_this_week|length }}</span>
                                    <span class="label">Week</span>
                                </div>
                            {% endif %}
                        {% if me.is_admin %}
                            </a>
                        {% endif %}
                    </li>
                {% endfor %}
            </ul>
        </section>
        <section class="map">
            <div class="heatmap"></div>
        </section>
    </section>
{% endblock %}
{% block scripts %}
    <script type="text/javascript">
        (function(){
            var countdown_clock = {
                die_at: ({{ managed_batch.starts_at.timestamp }} + (60 * 60 * 12)) * 1000,
                has_started: false,
                get_remaining_seconds: function () {
                return Math.floor((this.die_at - (+new Date())) / 1000);
            },
            get_countdown_component_simple: function (div, mod) {
                return Math.floor((this.get_remaining_seconds() / div) % mod);
            },
            get_countdown: function () {
                return {
                    weeks: Math.floor((this.get_remaining_seconds() / (60 * 60 * 24 * 7))),
                    days: this.get_countdown_component_simple(60 * 60 * 24, 7),
                    hours: this.get_countdown_component_simple(60 * 60, 24),
                    minutes: this.get_countdown_component_simple(60, 60),
                    seconds: this.get_countdown_component_simple(1, 60)
                };
            },
            is_leap_year: function (year) {
                return !((year % 4) || (!(year % 100) && (year % 400)));
            },
            days_in_year: function (year) {
                return this.is_leap_year(year) ? 366 : 365;
            },
            tick: function () {
                var countdown = countdown_clock.get_countdown();

                var weeks = countdown.weeks > 0 ? countdown.weeks + ' week' + (countdown.weeks != 1 ? 's' : '') : '';
                var days = countdown.days > 0 ? countdown.days + ' day' + (countdown.days != 1 ? 's' : '') : '';
                var hours = countdown.hours > 0 ? countdown.hours + ' hour' + (countdown.hours != 1 ? 's' : '') : '';
                var minutes = countdown.minutes > 0 ? countdown.minutes + ' minute' + (countdown.minutes != 1 ? 's' : '') : '';
                var seconds = countdown.seconds ? countdown.seconds + ' second' + (countdown.seconds != 1 ? 's' : '') : '';

                document.getElementById('time-remaining-weeks').textContent = weeks + (weeks && (days || hours || minutes || seconds) ? ',' : '');
                document.getElementById('time-remaining-days').textContent = days + (days && (hours || minutes || seconds) ? ',' : '');
                document.getElementById('time-remaining-hours').textContent = hours + (hours && (minutes || seconds) ? ',' : '');
                document.getElementById('time-remaining-minutes').textContent = minutes + (minutes && (seconds) ? ',' : '');
                document.getElementById('time-remaining-seconds').textContent = seconds;
            },
            start: function () {
                if (this.has_started) return;
                this.has_started = true;

                var animator = null;
                if (typeof(window['requestAnimationFrame']) !== 'undefined') {
                    animator = window['requestAnimationFrame'];
                } else if (typeof(window['mozRequestAnimationFrame']) !== 'undefined') {
                    animator = window['mozRequestAnimationFrame'];
                } else if (typeof(window['webkitRequestAnimationFrame']) !== 'undefined') {
                    animator = window['webkitRequestAnimationFrame'];
                } else {
                    animator = function (lambda) {
                        lambda();
                    }
                }

                setInterval(function () {
                    animator(countdown_clock.tick);
                }, 1000);

                animator(function () {
                    countdown_clock.tick();
                });
            }
        };
        if (document.getElementById('time-remaining-weeks')) {
            countdown_clock.start();
        }
        })();
    </script>
    <script type="text/javascript">
        function initialize() {
            var mapElem = $('div.heatmap')[0];
            var map = new google.maps.Map(mapElem, window.defaultMapOptions);
            map.setZoom(3);

            var overlay = new google.maps.OverlayView();
            overlay.draw = function() {};
            overlay.setMap(map);


            var eventRegs = [
                {% set isFirst = true %}
                {% for event in managed_batch.events %}
                {% if not isFirst %},{% endif %}
                    {
                        coords: new google.maps.LatLng({{ event.coordinates.lat }}, {{ event.coordinates.lng }}),
                        regs: {{ event.registrations|length }}
                    }
                {% set isFirst = false %}
                {% endfor %}
            ];

            var points = [];
            for (var i in eventRegs) {
                var e = eventRegs[i];
                for (var j = 0; j < e.regs; j++) {
                    points.push(e.coords);
                }
            }

            heatmap = new google.maps.visualization.HeatmapLayer({
                data: new google.maps.MVCArray(points)
            });
            heatmap.setMap(map);
            heatmap.set('radius', 25);

            var tzColors = {
                "Pacific": '#2A85F7',
                "Mountain": '#639A93',
                "Central": '#C47061',
                "Eastern": '#DC6EED'
            };

            var circles = {
                    {% set isFirst = true %}
                    {% for region in managed_batch.events %}
                    {% if not isFirst %},{% endif %}
                    "{{ region.webname|escape('js') }}": {
                        "name": "{{ region.name|escape('js') }}",
                        "id": "{{ region.id|escape('js') }}",
                        "webname": "{{ region.webname|escape('js') }}",
                        "abbr": "{{ region.abbr|escape('js') }}",
                        "manager_username": "{{ region.manager_username|escape('js') }}",
                        "color": tzColors["{{ region.simple_timezone }}"],
                        "circle": new google.maps.Circle({
                    fillColor: tzColors["{{ region.simple_timezone }}"],
                    fillOpacity: 1,
                    strokeColor: '#000000',
                    strokeOpacity: 0,
                    strokeWeight: 6,
                    radius: 70000,
                    map: map,
                    center: new google.maps.LatLng({{ region.coordinates.lat }}, {{ region.coordinates.lng }})
                })
            }
            {% set isFirst = false %}
            {% endfor %}
        };

        var divover = document.createElement('div');
        divover.style.position = 'absolute';
        divover.style.zIndex = '5000';
        divover.style.backgroundColor = '#2A85F7';
        divover.style.color = '#ffffff';
        divover.style.padding = '2px';
        divover.style.paddingLeft = '5px';
        divover.style.fontSize = '10px';
        divover.style.display = 'none';
        mapElem.insertBefore(divover, null);

        for (var city in circles) {
            var circle = circles[city].circle;

            google.maps.event.addListener(circle, "click", (function(circle, city) {
                return function() {
                    {% if me.is_admin %}
                        window.location = '/event/'+circles[city].id;
                    {% endif %}
                };
            })(circle, city));
            google.maps.event.addListener(circle, "mouseover", (function(circle, name, color) {
                return function() {
                    var point = overlay.getProjection().fromLatLngToContainerPixel(circle.getCenter());
                    divover.style.left = (point.x + 8)+"px";
                    divover.style.top = (point.y - 8)+"px";
                    divover.style.backgroundColor = color;
                    divover.style.display = "block";
                    divover.textContent = name;
                };
            })(circle, circles[city].name, circles[city].color));

            google.maps.event.addListener(circle, "mouseout", function() {
                divover.style.display = "none";
            });
        }

            {# Add picker #}
            var textElem = document.createElement('input');
            textElem.classList.add('region-picker');
            textElem.placeholder = 'Filter by name...';
            mapElem.parentNode.appendChild(textElem);

            textElem.addEventListener('keyup', function(){
                var currentText = textElem.value;
                for (var city in circles) {
                    var circle = circles[city].circle;
                    var name = circles[city].name.toLowerCase();
                    var webname = circles[city].webname.toLowerCase();
                    var abbr = circles[city].abbr.toLowerCase();
                    var manager_username = circles[city].manager_username.toLowerCase();

                    if (currentText.length == 0
                            || city.substr(0, currentText.length) == currentText
                            || abbr.substr(0, currentText.length) == currentText
                            || webname.substr(0, currentText.length) == currentText
                            || manager_username.substr(0, currentText.length) == currentText
                            || name.substr(0, currentText.length) == currentText) {
                        circle.setMap(map);
                        $('#hud-'+circles[city].id).css('visibility', 'visible');
                    } else {
                        circle.setMap(null);
                        $('#hud-'+circles[city].id).css('visibility', 'hidden');
                    }
                }
            });
        }
        google.maps.event.addDomListener(window, 'load', initialize);
    </script>
    <script type="text/javascript">

        (function(d){d.each(["backgroundColor","borderBottomColor","borderLeftColor","borderRightColor","borderTopColor","color","outlineColor"],function(f,e){d.fx.step[e]=function(g){if(!g.colorInit){g.start=c(g.elem,e);g.end=b(g.end);g.colorInit=true}g.elem.style[e]="rgb("+[Math.max(Math.min(parseInt((g.pos*(g.end[0]-g.start[0]))+g.start[0]),255),0),Math.max(Math.min(parseInt((g.pos*(g.end[1]-g.start[1]))+g.start[1]),255),0),Math.max(Math.min(parseInt((g.pos*(g.end[2]-g.start[2]))+g.start[2]),255),0)].join(",")+")"}});function b(f){var e;if(f&&f.constructor==Array&&f.length==3){return f}if(e=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(f)){return[parseInt(e[1]),parseInt(e[2]),parseInt(e[3])]}if(e=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(f)){return[parseFloat(e[1])*2.55,parseFloat(e[2])*2.55,parseFloat(e[3])*2.55]}if(e=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(f)){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}if(e=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(f)){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}if(e=/rgba\(0, 0, 0, 0\)/.exec(f)){return a.transparent}return a[d.trim(f).toLowerCase()]}function c(g,e){var f;do{f=d.css(g,e);if(f!=""&&f!="transparent"||d.nodeName(g,"body")){break}e="backgroundColor"}while(g=g.parentNode);return b(f)}var a={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0],transparent:[255,255,255]}})(jQuery);

        $('body').ready(function(){
            var previous_events = {};

            var setEvents = function(data)
            {
                for (var id in data) {
                    if(!data.hasOwnProperty(id)) {
                        continue;
                    }
                    var event = data[id];
                    var current_data = $('#my-'+id+', #hud-'+id);
                    var alert_val;

                    if (event.allow_registrations) {
                        alert_val = event.registrations;
                    } else {
                        alert_val = event.notify;
                    }

                    if (previous_events[id] && previous_events[id] < alert_val) {
                        playSound('registration');

                        var nameplate = current_data.find('div.name');
                        var originalColor = nameplate.css('background-color');
                        nameplate.css("background-color", "#F9FFB3")
                                .animate({ backgroundColor: originalColor}, 1500)
                                .animate({ backgroundColor: "#F9FFB3"}, 500)
                                .animate({ backgroundColor: originalColor}, 1500)
                                .animate({ backgroundColor: "#F9FFB3"}, 500)
                                .animate({ backgroundColor: originalColor}, 1500)
                                .animate({ backgroundColor: "#F9FFB3"}, 500)
                                .animate({ backgroundColor: originalColor}, 1500);
                    }

                    current_data.find('.registrants .number').text(event.registrations);
                    current_data.find('.today .number').text(event.today);
                    current_data.find('.this-week .number').text(event.this_week);
                    current_data.find('.percent .number').text(event.percent+'%');
                    current_data.find('.predicted .number').text(event.predicted);
                    current_data.find('.notify .number').text(event.notify);
                    current_data.find('.here .number').text(event.here)
                    previous_events[id] = alert_val;
                }
            }

            setInterval(function(){
                var xhr = $.ajax({
                    method: 'GET',
                    dataType: 'json',
                    url: '/updates.json',
                    success: function(data) {
                        setEvents(data);
                    }
                });
                setTimeout(function(){
                    xhr.abort();
                }, 10000);
            }, 5000);
        });
    </script>
{% endblock %}
